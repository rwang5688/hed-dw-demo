AWSTemplateFormatVersion: 2010-09-09

Resources:
  HedDwhS3Bucket:
    Type: AWS::S3::Bucket
    Properties:
      AccessControl: Private
      BucketEncryption:
        ServerSideEncryptionConfiguration:
          - ServerSideEncryptionByDefault:
              SSEAlgorithm: AES256
      PublicAccessBlockConfiguration:
        BlockPublicAcls: TRUE
        BlockPublicPolicy: TRUE
        IgnorePublicAcls: TRUE
        RestrictPublicBuckets: TRUE
      VersioningConfiguration:
        Status: Suspended

  HedDwhS3BucketPolicy:
    Type: 'AWS::S3::BucketPolicy'
    Properties:
      Bucket: !Ref HedDwhS3Bucket
      PolicyDocument:
        Id: HedDwhS3BucketPolicy
        Version: 2012-10-17
        Statement:
          - Sid: AllowOnlySecureTransport
            Action:
              - s3:*
            Condition:
              Bool:
                'aws:SecureTransport': 'false'
            Effect: Deny
            Principal: '*'
            Resource:
              - !Sub 'arn:aws:s3:::${HedDwhS3Bucket}'
              - !Sub 'arn:aws:s3:::${HedDwhS3Bucket}/*'

  GlueWorkflowRole:
    Type: AWS::IAM::Role
    Properties:
      AssumeRolePolicyDocument:
        Version: 2012-10-17
        Statement:
          -
            Effect: Allow
            Principal:
              Service:
                - glue.amazonaws.com
            Action:
              - sts:AssumeRole
      Policies:
        -
          PolicyName: DatalakeDataAccess
          PolicyDocument:
            Version: 2012-10-17
            Statement:
              -
                Sid: Lakeformation
                Effect: Allow
                Action:
                  - lakeformation:GetDataAccess
                  - lakeformation:GrantPermissions
                Resource: "*"
        -
          PolicyName: DatalakePassRole
          PolicyDocument:
            Version: 2012-10-17
            Statement:
              -
                Sid: PassRolePermissions
                Effect: Allow
                Action:
                  - iam:PassRole
                Resource: "*"
      ManagedPolicyArns:
        - arn:aws:iam::aws:policy/AmazonS3FullAccess
        - arn:aws:iam::aws:policy/service-role/AWSGlueServiceRole
        - arn:aws:iam::aws:policy/AWSGlueConsoleFullAccess

  LambdaRole:
    Type: AWS::IAM::Role
    Properties:
      AssumeRolePolicyDocument:
        Version: 2012-10-17
        Statement:
          -
            Effect: Allow
            Principal:
              Service:
                - lambda.amazonaws.com
            Action:
              - sts:AssumeRole
      Path: /
      ManagedPolicyArns: 
        - arn:aws:iam::aws:policy/AmazonS3FullAccess
      Policies:
        - PolicyName: LambdaRolePolicy
          PolicyDocument:
            Version: "2012-10-17"
            Statement:
              - Effect: Allow
                Action: s3:DeleteObject
                Resource:
                  - !Sub arn:aws:s3:::${HedDwhS3Bucket}/*
              - Effect: Allow
                Action: s3:ListBucket
                Resource:
                  - !Sub arn:aws:s3:::${HedDwhS3Bucket}
              - Effect: Allow
                Action: logs:CreateLogGroup
                Resource: !Sub arn:aws:logs:${AWS::Region}:${AWS::AccountId}:*
              - Effect: Allow
                Action:
                  - logs:CreateLogStream
                  - logs:PutLogEvents
                Resource: !Sub arn:aws:logs:${AWS::Region}:${AWS::AccountId}:log-group:*

  S3BucketHandler:
    Type: AWS::Lambda::Function
    Properties:
      Handler: index.handler
      Role: !GetAtt LambdaRole.Arn
      Code:
        ZipFile: |
          import os
          import json
          import cfnresponse
          import boto3
          from botocore.exceptions import ClientError

          s3 = boto3.resource('s3')

          def handler(event, context):
              print("Received event: %s" % json.dumps(event))
              s3_bucket = s3.Bucket(event['ResourceProperties']['Bucket'])

              try:
                  if event['RequestType'] == 'Create' or event['RequestType'] == 'Update':
                      result = cfnresponse.SUCCESS
                  elif event['RequestType'] == 'Delete':
                      s3_bucket.objects.delete()
                      result = cfnresponse.SUCCESS
              except ClientError as e:
                  print('Error: %s', e)
                  result = cfnresponse.FAILED

              cfnresponse.send(event, context, result, {})

      Runtime: python3.8
      Timeout: 300

  EmptyHedDwhS3Bucket:
    Type: "Custom::EmptyS3Bucket"
    Properties:
      ServiceToken: !GetAtt S3BucketHandler.Arn
      Bucket: !Ref HedDwhS3Bucket

  SisDemoDataHandler:
    Type: AWS::Lambda::Function
    Properties:
      Handler: index.handler
      Role: !GetAtt LambdaRole.Arn
      Code:
        ZipFile: |
          var AWS = require('aws-sdk');
          var s3 = new AWS.S3();

          exports.handler = (event) => {

              var listParams = {
                  Bucket: "ee-assets-prod-us-east-1",
                  Prefix: "modules/7009d8e656004426b1ea6f27f0487d56/v1/sisdemo/"
              };

              s3.listObjectsV2(listParams, function(err, data) {
                  if (err) console.log(err, err.stack); // an error occurred
                  else {
                      if (data.Contents.length) {
                          data.Contents.forEach(file => {
                              console.log(file);
                              var copyParams = {
                                  Bucket: process.env.BUCKET,
                                  CopySource: "ee-assets-prod-us-east-1" + '/' + file.Key,
                                  Key: file.Key.replace("modules/7009d8e656004426b1ea6f27f0487d56/v1/sisdemo/", "sisdemo/")
                              };
                              console.log(copyParams);
                              s3.copyObject(copyParams, function(copyErr, copyData) {
                                  if (copyErr) {
                                      console.log(copyErr);
                                  }
                                  else {
                                      console.log('Copied: ', copyParams.Key);
                                  }
                              });
                          });
                      }
                  }
              });
          };
          
      Environment: 
        Variables:
          BUCKET: !Ref HedDwhS3Bucket
      Runtime: nodejs14.x
      Timeout: 300

  dataeduSSMParam6F974C31:
    Type: 'AWS::SSM::Parameter'
    Properties:
      Type: String
      Value:
        'Fn::Join':
          - ''
          - - '{"base_url":"ee-assets-prod-'
            - Ref: 'AWS::Region'
            - >-
              .s3.amazonaws.com/modules/cfdd4f678e99415a9c1f11342a3a9887/v1/mockdata/lms_demo","version":
              "v1", "current_date": "2020-08-17", "perform_initial_load":
              "1","target_bucket":"
            - Ref: HedDwhS3Bucket
            - '", "base_s3_prefix":"lmsapi"}'
      Description: SSM Parameter for mock LMS integration.
      Name: /dataedu/lms-demo/state

  dataeduLMSS3FetchRole16948341:
    Type: 'AWS::IAM::Role'
    Properties:
      AssumeRolePolicyDocument:
        Statement:
          - Action: 'sts:AssumeRole'
            Effect: Allow
            Principal:
              Service: lambda.amazonaws.com
        Version: '2012-10-17'
      RoleName: dataedu-fetch-s3-lambda-role

  dataeduLMSS3FetchRoleDefaultPolicyE0083EF5:
    Type: 'AWS::IAM::Policy'
    Properties:
      PolicyDocument:
        Statement:
          - Action: 's3:ListBucket'
            Effect: Allow
            Resource:
              'Fn::GetAtt':
                - HedDwhS3Bucket
                - Arn
          - Action:
              - 's3:GetObject'
              - 's3:PutObject'
              - 's3:DeleteObject'
            Effect: Allow
            Resource:
              'Fn::Join':
                - ''
                - - 'Fn::GetAtt':
                      - HedDwhS3Bucket
                      - Arn
                  - /*
          - Action:
              - 'logs:CreateLogGroup'
              - 'logs:CreateLogStream'
              - 'logs:PutLogEvents'
            Effect: Allow
            Resource: '*'
        Version: '2012-10-17'
      PolicyName: dataeduLMSS3FetchRoleDefaultPolicyE0083EF5
      Roles:
        - Ref: dataeduLMSS3FetchRole16948341

  dataeduLMSS3FetchLambdaB561DBA8:
    Type: 'AWS::Lambda::Function'
    Properties:
      Code:
        S3Bucket:
          'Fn::Join':
            - ''
            - - ee-assets-prod-
              - Ref: 'AWS::Region'
        S3Key: >-
          modules/cfdd4f678e99415a9c1f11342a3a9887/v1/lambda/dataedu-fetch-s3-data.zip
      Role:
        'Fn::GetAtt':
          - dataeduLMSS3FetchRole16948341
          - Arn
      Description: >-
        Lambda function that fetches a file from a URL and stores it in a S3
        bucket
      FunctionName: dataedu-fetch-s3-data
      Handler: lambda_handler.lambda_handler
      MemorySize: 256
      Runtime: python3.7
      Timeout: 600
    DependsOn:
      - dataeduLMSS3FetchRoleDefaultPolicyE0083EF5
      - dataeduLMSS3FetchRole16948341

  dataeduLMSAPIFetchRoleE153F61C:
    Type: 'AWS::IAM::Role'
    Properties:
      AssumeRolePolicyDocument:
        Statement:
          - Action: 'sts:AssumeRole'
            Effect: Allow
            Principal:
              Service: lambda.amazonaws.com
        Version: '2012-10-17'
      RoleName: dataedu-fetch-s3-data-role

  dataeduLMSAPIFetchRoleDefaultPolicy716C3933:
    Type: 'AWS::IAM::Policy'
    Properties:
      PolicyDocument:
        Statement:
          - Action:
              - 'ssm:PutParameter'
              - 'ssm:GetParameter'
            Effect: Allow
            Resource:
              'Fn::Join':
                - ''
                - - 'arn:'
                  - Ref: 'AWS::Partition'
                  - ':ssm:'
                  - Ref: 'AWS::Region'
                  - ':'
                  - Ref: 'AWS::AccountId'
                  - ':parameter'
                  - Ref: dataeduSSMParam6F974C31
          - Action:
              - 'lambda:InvokeFunction'
              - 'lambda:InvokeAsync'
            Effect: Allow
            Resource:
              'Fn::Join':
                - ''
                - - 'arn:aws:lambda:'
                  - Ref: 'AWS::Region'
                  - ':'
                  - Ref: 'AWS::AccountId'
                  - ':function:dataedu-*'
          - Action: 'events:DisableRule'
            Effect: Allow
            Resource:
              'Fn::Join':
                - ''
                - - 'arn:aws:events:'
                  - Ref: 'AWS::Region'
                  - ':'
                  - Ref: 'AWS::AccountId'
                  - ':rule/dataedu-lmsapi-sync'
          - Action:
              - 'logs:CreateLogGroup'
              - 'logs:CreateLogStream'
              - 'logs:PutLogEvents'
            Effect: Allow
            Resource: '*'
        Version: '2012-10-17'
      PolicyName: dataeduLMSAPIFetchRoleDefaultPolicy716C3933
      Roles:
        - Ref: dataeduLMSAPIFetchRoleE153F61C

  dataeduLMSAPIFetchLambdaBD421AD7:
    Type: 'AWS::Lambda::Function'
    Properties:
      Code:
        S3Bucket:
          'Fn::Join':
            - ''
            - - ee-assets-prod-
              - Ref: 'AWS::Region'
        S3Key: >-
          modules/cfdd4f678e99415a9c1f11342a3a9887/v1/lambda/dataedu-fetch-lmsapi.zip
      Role:
        'Fn::GetAtt':
          - dataeduLMSAPIFetchRoleE153F61C
          - Arn
      Description: >-
        Lambda function that mimics invoking an API to obtain data from a SaaS
        app
      FunctionName: dataedu-fetch-lmsapi
      Handler: lambda_function.lambda_handler
      MemorySize: 256
      Runtime: python3.7
      Timeout: 600
    DependsOn:
      - dataeduLMSAPIFetchRoleDefaultPolicy716C3933
      - dataeduLMSAPIFetchRoleE153F61C

  dataeduEventBridgeRuleF5498C76:
    Type: 'AWS::Events::Rule'
    Properties:
      Description: Invokes demo API on a scheduled basis
      Name: dataedu-lmsapi-sync
      ScheduleExpression: rate(1 minute)
      State: DISABLED
      Targets:
        - Arn:
            'Fn::GetAtt':
              - dataeduLMSAPIFetchLambdaBD421AD7
              - Arn
          Id: Target0

  dataeduEventBridgeRuleAllowEventRuledataEDUstackEEdataeduLMSAPIFetchLambda7A54F1DB5834D1AF:
    Type: 'AWS::Lambda::Permission'
    Properties:
      Action: 'lambda:InvokeFunction'
      FunctionName:
        'Fn::GetAtt':
          - dataeduLMSAPIFetchLambdaBD421AD7
          - Arn
      Principal: events.amazonaws.com
      SourceArn:
        'Fn::GetAtt':
          - dataeduEventBridgeRuleF5498C76
          - Arn

Outputs:
  HedDwhS3Bucket:
    Description: S3 Bucket that was created
    Value: !Ref HedDwhS3Bucket

  GlueWorkflowRoleArn:
    Description: Glue Workflow service role ARN
    Value: 
      Fn::GetAtt: GlueWorkflowRole.Arn
